jobs:
  Cheerios:
    needs:
    - coq
    - StructTact
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha\
        \ }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  mergeable=$(git merge --no-commit --no-ff ${{ github.event.pull_request.base.sha\
        \ }} > /dev/null 2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n\
        \  if [ -z \"$merge_commit\" -o \"x$mergeable\" != \"x0\" ]; then\n    echo\
        \ \"tested_commit=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\
        \  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target Cheerios
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"8.20\" --argstr job \"Cheerios\" \\\n   --dry-run 2>&1 > /dev/null)\n\
        echo $nb_dry_run\necho status=$(echo $nb_dry_run | grep \"built:\" | sed \"\
        s/.*/built/\") >> $GITHUB_OUTPUT\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: StructTact'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "StructTact"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "Cheerios"
  CoLoR:
    needs:
    - coq
    - bignums
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha\
        \ }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  mergeable=$(git merge --no-commit --no-ff ${{ github.event.pull_request.base.sha\
        \ }} > /dev/null 2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n\
        \  if [ -z \"$merge_commit\" -o \"x$mergeable\" != \"x0\" ]; then\n    echo\
        \ \"tested_commit=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\
        \  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target CoLoR
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"8.20\" --argstr job \"CoLoR\" \\\n   --dry-run 2>&1 > /dev/null)\n\
        echo $nb_dry_run\necho status=$(echo $nb_dry_run | grep \"built:\" | sed \"\
        s/.*/built/\") >> $GITHUB_OUTPUT\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: bignums'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "bignums"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "CoLoR"
  ITree:
    needs:
    - coq
    - coq-ext-lib
    - paco
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha\
        \ }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  mergeable=$(git merge --no-commit --no-ff ${{ github.event.pull_request.base.sha\
        \ }} > /dev/null 2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n\
        \  if [ -z \"$merge_commit\" -o \"x$mergeable\" != \"x0\" ]; then\n    echo\
        \ \"tested_commit=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\
        \  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target ITree
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"8.20\" --argstr job \"ITree\" \\\n   --dry-run 2>&1 > /dev/null)\n\
        echo $nb_dry_run\necho status=$(echo $nb_dry_run | grep \"built:\" | sed \"\
        s/.*/built/\") >> $GITHUB_OUTPUT\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq-ext-lib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq-ext-lib"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: paco'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "paco"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "ITree"
  InfSeqExt:
    needs:
    - coq
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha\
        \ }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  mergeable=$(git merge --no-commit --no-ff ${{ github.event.pull_request.base.sha\
        \ }} > /dev/null 2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n\
        \  if [ -z \"$merge_commit\" -o \"x$mergeable\" != \"x0\" ]; then\n    echo\
        \ \"tested_commit=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\
        \  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target InfSeqExt
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"8.20\" --argstr job \"InfSeqExt\" \\\n   --dry-run 2>&1 > /dev/null)\n\
        echo $nb_dry_run\necho status=$(echo $nb_dry_run | grep \"built:\" | sed \"\
        s/.*/built/\") >> $GITHUB_OUTPUT\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "InfSeqExt"
  LibHyps:
    needs:
    - coq
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha\
        \ }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  mergeable=$(git merge --no-commit --no-ff ${{ github.event.pull_request.base.sha\
        \ }} > /dev/null 2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n\
        \  if [ -z \"$merge_commit\" -o \"x$mergeable\" != \"x0\" ]; then\n    echo\
        \ \"tested_commit=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\
        \  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target LibHyps
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"8.20\" --argstr job \"LibHyps\" \\\n   --dry-run 2>&1 > /dev/null)\n\
        echo $nb_dry_run\necho status=$(echo $nb_dry_run | grep \"built:\" | sed \"\
        s/.*/built/\") >> $GITHUB_OUTPUT\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "LibHyps"
  StructTact:
    needs:
    - coq
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha\
        \ }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  mergeable=$(git merge --no-commit --no-ff ${{ github.event.pull_request.base.sha\
        \ }} > /dev/null 2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n\
        \  if [ -z \"$merge_commit\" -o \"x$mergeable\" != \"x0\" ]; then\n    echo\
        \ \"tested_commit=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\
        \  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target StructTact
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"8.20\" --argstr job \"StructTact\" \\\n   --dry-run 2>&1 > /dev/null)\n\
        echo $nb_dry_run\necho status=$(echo $nb_dry_run | grep \"built:\" | sed \"\
        s/.*/built/\") >> $GITHUB_OUTPUT\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "StructTact"
  aac-tactics:
    needs:
    - coq
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha\
        \ }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  mergeable=$(git merge --no-commit --no-ff ${{ github.event.pull_request.base.sha\
        \ }} > /dev/null 2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n\
        \  if [ -z \"$merge_commit\" -o \"x$mergeable\" != \"x0\" ]; then\n    echo\
        \ \"tested_commit=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\
        \  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target aac-tactics
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"8.20\" --argstr job \"aac-tactics\" \\\n   --dry-run 2>&1 > /dev/null)\n\
        echo $nb_dry_run\necho status=$(echo $nb_dry_run | grep \"built:\" | sed \"\
        s/.*/built/\") >> $GITHUB_OUTPUT\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "aac-tactics"
  bignums:
    needs:
    - coq
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha\
        \ }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  mergeable=$(git merge --no-commit --no-ff ${{ github.event.pull_request.base.sha\
        \ }} > /dev/null 2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n\
        \  if [ -z \"$merge_commit\" -o \"x$mergeable\" != \"x0\" ]; then\n    echo\
        \ \"tested_commit=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\
        \  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target bignums
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"8.20\" --argstr job \"bignums\" \\\n   --dry-run 2>&1 > /dev/null)\n\
        echo $nb_dry_run\necho status=$(echo $nb_dry_run | grep \"built:\" | sed \"\
        s/.*/built/\") >> $GITHUB_OUTPUT\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "bignums"
  ceres:
    needs:
    - coq
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha\
        \ }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  mergeable=$(git merge --no-commit --no-ff ${{ github.event.pull_request.base.sha\
        \ }} > /dev/null 2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n\
        \  if [ -z \"$merge_commit\" -o \"x$mergeable\" != \"x0\" ]; then\n    echo\
        \ \"tested_commit=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\
        \  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target ceres
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"8.20\" --argstr job \"ceres\" \\\n   --dry-run 2>&1 > /dev/null)\n\
        echo $nb_dry_run\necho status=$(echo $nb_dry_run | grep \"built:\" | sed \"\
        s/.*/built/\") >> $GITHUB_OUTPUT\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "ceres"
  coq:
    needs: []
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha\
        \ }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  mergeable=$(git merge --no-commit --no-ff ${{ github.event.pull_request.base.sha\
        \ }} > /dev/null 2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n\
        \  if [ -z \"$merge_commit\" -o \"x$mergeable\" != \"x0\" ]; then\n    echo\
        \ \"tested_commit=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\
        \  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target coq
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"8.20\" --argstr job \"coq\" \\\n   --dry-run 2>&1 > /dev/null)\n\
        echo $nb_dry_run\necho status=$(echo $nb_dry_run | grep \"built:\" | sed \"\
        s/.*/built/\") >> $GITHUB_OUTPUT\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq"
  coq-elpi:
    needs:
    - coq
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha\
        \ }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  mergeable=$(git merge --no-commit --no-ff ${{ github.event.pull_request.base.sha\
        \ }} > /dev/null 2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n\
        \  if [ -z \"$merge_commit\" -o \"x$mergeable\" != \"x0\" ]; then\n    echo\
        \ \"tested_commit=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\
        \  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target coq-elpi
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"8.20\" --argstr job \"coq-elpi\" \\\n   --dry-run 2>&1 > /dev/null)\n\
        echo $nb_dry_run\necho status=$(echo $nb_dry_run | grep \"built:\" | sed \"\
        s/.*/built/\") >> $GITHUB_OUTPUT\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq-elpi"
  coq-ext-lib:
    needs:
    - coq
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha\
        \ }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  mergeable=$(git merge --no-commit --no-ff ${{ github.event.pull_request.base.sha\
        \ }} > /dev/null 2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n\
        \  if [ -z \"$merge_commit\" -o \"x$mergeable\" != \"x0\" ]; then\n    echo\
        \ \"tested_commit=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\
        \  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target coq-ext-lib
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"8.20\" --argstr job \"coq-ext-lib\" \\\n   --dry-run 2>&1 > /dev/null)\n\
        echo $nb_dry_run\necho status=$(echo $nb_dry_run | grep \"built:\" | sed \"\
        s/.*/built/\") >> $GITHUB_OUTPUT\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq-ext-lib"
  coq-record-update:
    needs:
    - coq
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha\
        \ }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  mergeable=$(git merge --no-commit --no-ff ${{ github.event.pull_request.base.sha\
        \ }} > /dev/null 2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n\
        \  if [ -z \"$merge_commit\" -o \"x$mergeable\" != \"x0\" ]; then\n    echo\
        \ \"tested_commit=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\
        \  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target coq-record-update
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"8.20\" --argstr job \"coq-record-update\" \\\n   --dry-run 2>&1\
        \ > /dev/null)\necho $nb_dry_run\necho status=$(echo $nb_dry_run | grep \"\
        built:\" | sed \"s/.*/built/\") >> $GITHUB_OUTPUT\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq-record-update"
  coq-shell:
    needs:
    - coq
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha\
        \ }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  mergeable=$(git merge --no-commit --no-ff ${{ github.event.pull_request.base.sha\
        \ }} > /dev/null 2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n\
        \  if [ -z \"$merge_commit\" -o \"x$mergeable\" != \"x0\" ]; then\n    echo\
        \ \"tested_commit=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\
        \  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target coq-shell
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"8.20\" --argstr job \"coq-shell\" \\\n   --dry-run 2>&1 > /dev/null)\n\
        echo $nb_dry_run\necho status=$(echo $nb_dry_run | grep \"built:\" | sed \"\
        s/.*/built/\") >> $GITHUB_OUTPUT\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq-shell"
  coqide:
    needs:
    - coq
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha\
        \ }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  mergeable=$(git merge --no-commit --no-ff ${{ github.event.pull_request.base.sha\
        \ }} > /dev/null 2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n\
        \  if [ -z \"$merge_commit\" -o \"x$mergeable\" != \"x0\" ]; then\n    echo\
        \ \"tested_commit=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\
        \  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target coqide
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"8.20\" --argstr job \"coqide\" \\\n   --dry-run 2>&1 > /dev/null)\n\
        echo $nb_dry_run\necho status=$(echo $nb_dry_run | grep \"built:\" | sed \"\
        s/.*/built/\") >> $GITHUB_OUTPUT\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coqide"
  coqprime:
    needs:
    - coq
    - bignums
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha\
        \ }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  mergeable=$(git merge --no-commit --no-ff ${{ github.event.pull_request.base.sha\
        \ }} > /dev/null 2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n\
        \  if [ -z \"$merge_commit\" -o \"x$mergeable\" != \"x0\" ]; then\n    echo\
        \ \"tested_commit=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\
        \  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target coqprime
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"8.20\" --argstr job \"coqprime\" \\\n   --dry-run 2>&1 > /dev/null)\n\
        echo $nb_dry_run\necho status=$(echo $nb_dry_run | grep \"built:\" | sed \"\
        s/.*/built/\") >> $GITHUB_OUTPUT\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: bignums'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "bignums"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coqprime"
  coquelicot:
    needs:
    - coq
    - mathcomp-ssreflect
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha\
        \ }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  mergeable=$(git merge --no-commit --no-ff ${{ github.event.pull_request.base.sha\
        \ }} > /dev/null 2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n\
        \  if [ -z \"$merge_commit\" -o \"x$mergeable\" != \"x0\" ]; then\n    echo\
        \ \"tested_commit=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\
        \  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target coquelicot
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"8.20\" --argstr job \"coquelicot\" \\\n   --dry-run 2>&1 > /dev/null)\n\
        echo $nb_dry_run\necho status=$(echo $nb_dry_run | grep \"built:\" | sed \"\
        s/.*/built/\") >> $GITHUB_OUTPUT\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-ssreflect'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-ssreflect"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coquelicot"
  corn:
    needs:
    - coq
    - bignums
    - math-classes
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha\
        \ }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  mergeable=$(git merge --no-commit --no-ff ${{ github.event.pull_request.base.sha\
        \ }} > /dev/null 2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n\
        \  if [ -z \"$merge_commit\" -o \"x$mergeable\" != \"x0\" ]; then\n    echo\
        \ \"tested_commit=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\
        \  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target corn
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"8.20\" --argstr job \"corn\" \\\n   --dry-run 2>&1 > /dev/null)\n\
        echo $nb_dry_run\necho status=$(echo $nb_dry_run | grep \"built:\" | sed \"\
        s/.*/built/\") >> $GITHUB_OUTPUT\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: bignums'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "bignums"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: math-classes'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "math-classes"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "corn"
  deriving:
    needs:
    - coq
    - mathcomp-ssreflect
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha\
        \ }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  mergeable=$(git merge --no-commit --no-ff ${{ github.event.pull_request.base.sha\
        \ }} > /dev/null 2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n\
        \  if [ -z \"$merge_commit\" -o \"x$mergeable\" != \"x0\" ]; then\n    echo\
        \ \"tested_commit=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\
        \  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target deriving
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"8.20\" --argstr job \"deriving\" \\\n   --dry-run 2>&1 > /dev/null)\n\
        echo $nb_dry_run\necho status=$(echo $nb_dry_run | grep \"built:\" | sed \"\
        s/.*/built/\") >> $GITHUB_OUTPUT\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-ssreflect'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-ssreflect"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "deriving"
  equations:
    needs:
    - coq
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha\
        \ }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  mergeable=$(git merge --no-commit --no-ff ${{ github.event.pull_request.base.sha\
        \ }} > /dev/null 2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n\
        \  if [ -z \"$merge_commit\" -o \"x$mergeable\" != \"x0\" ]; then\n    echo\
        \ \"tested_commit=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\
        \  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target equations
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"8.20\" --argstr job \"equations\" \\\n   --dry-run 2>&1 > /dev/null)\n\
        echo $nb_dry_run\necho status=$(echo $nb_dry_run | grep \"built:\" | sed \"\
        s/.*/built/\") >> $GITHUB_OUTPUT\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "equations"
  extructures:
    needs:
    - coq
    - mathcomp-ssreflect
    - deriving
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha\
        \ }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  mergeable=$(git merge --no-commit --no-ff ${{ github.event.pull_request.base.sha\
        \ }} > /dev/null 2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n\
        \  if [ -z \"$merge_commit\" -o \"x$mergeable\" != \"x0\" ]; then\n    echo\
        \ \"tested_commit=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\
        \  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target extructures
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"8.20\" --argstr job \"extructures\" \\\n   --dry-run 2>&1 > /dev/null)\n\
        echo $nb_dry_run\necho status=$(echo $nb_dry_run | grep \"built:\" | sed \"\
        s/.*/built/\") >> $GITHUB_OUTPUT\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-ssreflect'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-ssreflect"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: deriving'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "deriving"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "extructures"
  flocq:
    needs:
    - coq
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha\
        \ }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  mergeable=$(git merge --no-commit --no-ff ${{ github.event.pull_request.base.sha\
        \ }} > /dev/null 2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n\
        \  if [ -z \"$merge_commit\" -o \"x$mergeable\" != \"x0\" ]; then\n    echo\
        \ \"tested_commit=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\
        \  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target flocq
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"8.20\" --argstr job \"flocq\" \\\n   --dry-run 2>&1 > /dev/null)\n\
        echo $nb_dry_run\necho status=$(echo $nb_dry_run | grep \"built:\" | sed \"\
        s/.*/built/\") >> $GITHUB_OUTPUT\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "flocq"
  fourcolor:
    needs:
    - coq
    - mathcomp-algebra
    - mathcomp-ssreflect
    - mathcomp-fingroup
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha\
        \ }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  mergeable=$(git merge --no-commit --no-ff ${{ github.event.pull_request.base.sha\
        \ }} > /dev/null 2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n\
        \  if [ -z \"$merge_commit\" -o \"x$mergeable\" != \"x0\" ]; then\n    echo\
        \ \"tested_commit=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\
        \  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target fourcolor
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"8.20\" --argstr job \"fourcolor\" \\\n   --dry-run 2>&1 > /dev/null)\n\
        echo $nb_dry_run\necho status=$(echo $nb_dry_run | grep \"built:\" | sed \"\
        s/.*/built/\") >> $GITHUB_OUTPUT\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-algebra'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-algebra"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-ssreflect'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-ssreflect"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-fingroup'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-fingroup"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "fourcolor"
  hierarchy-builder:
    needs:
    - coq
    - coq-elpi
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha\
        \ }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  mergeable=$(git merge --no-commit --no-ff ${{ github.event.pull_request.base.sha\
        \ }} > /dev/null 2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n\
        \  if [ -z \"$merge_commit\" -o \"x$mergeable\" != \"x0\" ]; then\n    echo\
        \ \"tested_commit=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\
        \  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target hierarchy-builder
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"8.20\" --argstr job \"hierarchy-builder\" \\\n   --dry-run 2>&1\
        \ > /dev/null)\necho $nb_dry_run\necho status=$(echo $nb_dry_run | grep \"\
        built:\" | sed \"s/.*/built/\") >> $GITHUB_OUTPUT\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq-elpi'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq-elpi"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "hierarchy-builder"
  high-school-geometry:
    needs:
    - coq
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha\
        \ }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  mergeable=$(git merge --no-commit --no-ff ${{ github.event.pull_request.base.sha\
        \ }} > /dev/null 2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n\
        \  if [ -z \"$merge_commit\" -o \"x$mergeable\" != \"x0\" ]; then\n    echo\
        \ \"tested_commit=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\
        \  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target high-school-geometry
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"8.20\" --argstr job \"high-school-geometry\" \\\n   --dry-run 2>&1\
        \ > /dev/null)\necho $nb_dry_run\necho status=$(echo $nb_dry_run | grep \"\
        built:\" | sed \"s/.*/built/\") >> $GITHUB_OUTPUT\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "high-school-geometry"
  math-classes:
    needs:
    - coq
    - bignums
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha\
        \ }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  mergeable=$(git merge --no-commit --no-ff ${{ github.event.pull_request.base.sha\
        \ }} > /dev/null 2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n\
        \  if [ -z \"$merge_commit\" -o \"x$mergeable\" != \"x0\" ]; then\n    echo\
        \ \"tested_commit=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\
        \  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target math-classes
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"8.20\" --argstr job \"math-classes\" \\\n   --dry-run 2>&1 > /dev/null)\n\
        echo $nb_dry_run\necho status=$(echo $nb_dry_run | grep \"built:\" | sed \"\
        s/.*/built/\") >> $GITHUB_OUTPUT\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: bignums'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "bignums"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "math-classes"
  mathcomp:
    needs:
    - coq
    - mathcomp-ssreflect
    - mathcomp-fingroup
    - mathcomp-algebra
    - mathcomp-solvable
    - mathcomp-field
    - mathcomp-character
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha\
        \ }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  mergeable=$(git merge --no-commit --no-ff ${{ github.event.pull_request.base.sha\
        \ }} > /dev/null 2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n\
        \  if [ -z \"$merge_commit\" -o \"x$mergeable\" != \"x0\" ]; then\n    echo\
        \ \"tested_commit=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\
        \  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target mathcomp
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"8.20\" --argstr job \"mathcomp\" \\\n   --dry-run 2>&1 > /dev/null)\n\
        echo $nb_dry_run\necho status=$(echo $nb_dry_run | grep \"built:\" | sed \"\
        s/.*/built/\") >> $GITHUB_OUTPUT\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-ssreflect'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-ssreflect"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-fingroup'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-fingroup"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-algebra'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-algebra"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-solvable'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-solvable"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-field'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-field"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-character'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-character"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp"
  mathcomp-algebra:
    needs:
    - coq
    - mathcomp-ssreflect
    - mathcomp-fingroup
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha\
        \ }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  mergeable=$(git merge --no-commit --no-ff ${{ github.event.pull_request.base.sha\
        \ }} > /dev/null 2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n\
        \  if [ -z \"$merge_commit\" -o \"x$mergeable\" != \"x0\" ]; then\n    echo\
        \ \"tested_commit=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\
        \  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target mathcomp-algebra
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"8.20\" --argstr job \"mathcomp-algebra\" \\\n   --dry-run 2>&1\
        \ > /dev/null)\necho $nb_dry_run\necho status=$(echo $nb_dry_run | grep \"\
        built:\" | sed \"s/.*/built/\") >> $GITHUB_OUTPUT\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-ssreflect'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-ssreflect"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-fingroup'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-fingroup"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-algebra"
  mathcomp-bigenough:
    needs:
    - coq
    - mathcomp-ssreflect
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha\
        \ }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  mergeable=$(git merge --no-commit --no-ff ${{ github.event.pull_request.base.sha\
        \ }} > /dev/null 2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n\
        \  if [ -z \"$merge_commit\" -o \"x$mergeable\" != \"x0\" ]; then\n    echo\
        \ \"tested_commit=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\
        \  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target mathcomp-bigenough
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"8.20\" --argstr job \"mathcomp-bigenough\" \\\n   --dry-run 2>&1\
        \ > /dev/null)\necho $nb_dry_run\necho status=$(echo $nb_dry_run | grep \"\
        built:\" | sed \"s/.*/built/\") >> $GITHUB_OUTPUT\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-ssreflect'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-ssreflect"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-bigenough"
  mathcomp-character:
    needs:
    - coq
    - mathcomp-ssreflect
    - mathcomp-fingroup
    - mathcomp-algebra
    - mathcomp-solvable
    - mathcomp-field
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha\
        \ }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  mergeable=$(git merge --no-commit --no-ff ${{ github.event.pull_request.base.sha\
        \ }} > /dev/null 2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n\
        \  if [ -z \"$merge_commit\" -o \"x$mergeable\" != \"x0\" ]; then\n    echo\
        \ \"tested_commit=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\
        \  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target mathcomp-character
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"8.20\" --argstr job \"mathcomp-character\" \\\n   --dry-run 2>&1\
        \ > /dev/null)\necho $nb_dry_run\necho status=$(echo $nb_dry_run | grep \"\
        built:\" | sed \"s/.*/built/\") >> $GITHUB_OUTPUT\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-ssreflect'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-ssreflect"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-fingroup'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-fingroup"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-algebra'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-algebra"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-solvable'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-solvable"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-field'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-field"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-character"
  mathcomp-field:
    needs:
    - coq
    - mathcomp-ssreflect
    - mathcomp-fingroup
    - mathcomp-algebra
    - mathcomp-solvable
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha\
        \ }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  mergeable=$(git merge --no-commit --no-ff ${{ github.event.pull_request.base.sha\
        \ }} > /dev/null 2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n\
        \  if [ -z \"$merge_commit\" -o \"x$mergeable\" != \"x0\" ]; then\n    echo\
        \ \"tested_commit=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\
        \  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target mathcomp-field
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"8.20\" --argstr job \"mathcomp-field\" \\\n   --dry-run 2>&1 >\
        \ /dev/null)\necho $nb_dry_run\necho status=$(echo $nb_dry_run | grep \"built:\"\
        \ | sed \"s/.*/built/\") >> $GITHUB_OUTPUT\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-ssreflect'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-ssreflect"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-fingroup'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-fingroup"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-algebra'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-algebra"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-solvable'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-solvable"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-field"
  mathcomp-fingroup:
    needs:
    - coq
    - mathcomp-ssreflect
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha\
        \ }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  mergeable=$(git merge --no-commit --no-ff ${{ github.event.pull_request.base.sha\
        \ }} > /dev/null 2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n\
        \  if [ -z \"$merge_commit\" -o \"x$mergeable\" != \"x0\" ]; then\n    echo\
        \ \"tested_commit=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\
        \  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target mathcomp-fingroup
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"8.20\" --argstr job \"mathcomp-fingroup\" \\\n   --dry-run 2>&1\
        \ > /dev/null)\necho $nb_dry_run\necho status=$(echo $nb_dry_run | grep \"\
        built:\" | sed \"s/.*/built/\") >> $GITHUB_OUTPUT\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-ssreflect'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-ssreflect"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-fingroup"
  mathcomp-finmap:
    needs:
    - coq
    - mathcomp-ssreflect
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha\
        \ }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  mergeable=$(git merge --no-commit --no-ff ${{ github.event.pull_request.base.sha\
        \ }} > /dev/null 2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n\
        \  if [ -z \"$merge_commit\" -o \"x$mergeable\" != \"x0\" ]; then\n    echo\
        \ \"tested_commit=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\
        \  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target mathcomp-finmap
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"8.20\" --argstr job \"mathcomp-finmap\" \\\n   --dry-run 2>&1 >\
        \ /dev/null)\necho $nb_dry_run\necho status=$(echo $nb_dry_run | grep \"built:\"\
        \ | sed \"s/.*/built/\") >> $GITHUB_OUTPUT\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-ssreflect'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-ssreflect"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-finmap"
  mathcomp-solvable:
    needs:
    - coq
    - mathcomp-ssreflect
    - mathcomp-fingroup
    - mathcomp-algebra
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha\
        \ }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  mergeable=$(git merge --no-commit --no-ff ${{ github.event.pull_request.base.sha\
        \ }} > /dev/null 2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n\
        \  if [ -z \"$merge_commit\" -o \"x$mergeable\" != \"x0\" ]; then\n    echo\
        \ \"tested_commit=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\
        \  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target mathcomp-solvable
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"8.20\" --argstr job \"mathcomp-solvable\" \\\n   --dry-run 2>&1\
        \ > /dev/null)\necho $nb_dry_run\necho status=$(echo $nb_dry_run | grep \"\
        built:\" | sed \"s/.*/built/\") >> $GITHUB_OUTPUT\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-ssreflect'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-ssreflect"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-fingroup'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-fingroup"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-algebra'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-algebra"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-solvable"
  mathcomp-ssreflect:
    needs:
    - coq
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha\
        \ }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  mergeable=$(git merge --no-commit --no-ff ${{ github.event.pull_request.base.sha\
        \ }} > /dev/null 2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n\
        \  if [ -z \"$merge_commit\" -o \"x$mergeable\" != \"x0\" ]; then\n    echo\
        \ \"tested_commit=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\
        \  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target mathcomp-ssreflect
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"8.20\" --argstr job \"mathcomp-ssreflect\" \\\n   --dry-run 2>&1\
        \ > /dev/null)\necho $nb_dry_run\necho status=$(echo $nb_dry_run | grep \"\
        built:\" | sed \"s/.*/built/\") >> $GITHUB_OUTPUT\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-ssreflect"
  mathcomp-word:
    needs:
    - coq
    - mathcomp-algebra
    - mathcomp-ssreflect
    - mathcomp-fingroup
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha\
        \ }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  mergeable=$(git merge --no-commit --no-ff ${{ github.event.pull_request.base.sha\
        \ }} > /dev/null 2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n\
        \  if [ -z \"$merge_commit\" -o \"x$mergeable\" != \"x0\" ]; then\n    echo\
        \ \"tested_commit=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\
        \  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target mathcomp-word
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"8.20\" --argstr job \"mathcomp-word\" \\\n   --dry-run 2>&1 > /dev/null)\n\
        echo $nb_dry_run\necho status=$(echo $nb_dry_run | grep \"built:\" | sed \"\
        s/.*/built/\") >> $GITHUB_OUTPUT\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-algebra'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-algebra"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-ssreflect'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-ssreflect"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-fingroup'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-fingroup"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-word"
  mathcomp-zify:
    needs:
    - coq
    - mathcomp-algebra
    - mathcomp-ssreflect
    - mathcomp-fingroup
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha\
        \ }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  mergeable=$(git merge --no-commit --no-ff ${{ github.event.pull_request.base.sha\
        \ }} > /dev/null 2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n\
        \  if [ -z \"$merge_commit\" -o \"x$mergeable\" != \"x0\" ]; then\n    echo\
        \ \"tested_commit=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\
        \  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target mathcomp-zify
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"8.20\" --argstr job \"mathcomp-zify\" \\\n   --dry-run 2>&1 > /dev/null)\n\
        echo $nb_dry_run\necho status=$(echo $nb_dry_run | grep \"built:\" | sed \"\
        s/.*/built/\") >> $GITHUB_OUTPUT\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-algebra'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-algebra"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-ssreflect'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-ssreflect"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-fingroup'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-fingroup"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-zify"
  multinomials:
    needs:
    - coq
    - mathcomp-ssreflect
    - mathcomp-algebra
    - mathcomp-finmap
    - mathcomp-fingroup
    - mathcomp-bigenough
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha\
        \ }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  mergeable=$(git merge --no-commit --no-ff ${{ github.event.pull_request.base.sha\
        \ }} > /dev/null 2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n\
        \  if [ -z \"$merge_commit\" -o \"x$mergeable\" != \"x0\" ]; then\n    echo\
        \ \"tested_commit=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\
        \  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target multinomials
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"8.20\" --argstr job \"multinomials\" \\\n   --dry-run 2>&1 > /dev/null)\n\
        echo $nb_dry_run\necho status=$(echo $nb_dry_run | grep \"built:\" | sed \"\
        s/.*/built/\") >> $GITHUB_OUTPUT\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-ssreflect'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-ssreflect"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-algebra'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-algebra"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-finmap'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-finmap"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-fingroup'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-fingroup"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-bigenough'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-bigenough"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "multinomials"
  paco:
    needs:
    - coq
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha\
        \ }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  mergeable=$(git merge --no-commit --no-ff ${{ github.event.pull_request.base.sha\
        \ }} > /dev/null 2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n\
        \  if [ -z \"$merge_commit\" -o \"x$mergeable\" != \"x0\" ]; then\n    echo\
        \ \"tested_commit=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\
        \  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target paco
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"8.20\" --argstr job \"paco\" \\\n   --dry-run 2>&1 > /dev/null)\n\
        echo $nb_dry_run\necho status=$(echo $nb_dry_run | grep \"built:\" | sed \"\
        s/.*/built/\") >> $GITHUB_OUTPUT\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "paco"
  paramcoq:
    needs:
    - coq
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha\
        \ }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  mergeable=$(git merge --no-commit --no-ff ${{ github.event.pull_request.base.sha\
        \ }} > /dev/null 2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n\
        \  if [ -z \"$merge_commit\" -o \"x$mergeable\" != \"x0\" ]; then\n    echo\
        \ \"tested_commit=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\
        \  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target paramcoq
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"8.20\" --argstr job \"paramcoq\" \\\n   --dry-run 2>&1 > /dev/null)\n\
        echo $nb_dry_run\necho status=$(echo $nb_dry_run | grep \"built:\" | sed \"\
        s/.*/built/\") >> $GITHUB_OUTPUT\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "paramcoq"
  parsec:
    needs:
    - coq
    - ceres
    - coq-ext-lib
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha\
        \ }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  mergeable=$(git merge --no-commit --no-ff ${{ github.event.pull_request.base.sha\
        \ }} > /dev/null 2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n\
        \  if [ -z \"$merge_commit\" -o \"x$mergeable\" != \"x0\" ]; then\n    echo\
        \ \"tested_commit=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\
        \  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target parsec
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"8.20\" --argstr job \"parsec\" \\\n   --dry-run 2>&1 > /dev/null)\n\
        echo $nb_dry_run\necho status=$(echo $nb_dry_run | grep \"built:\" | sed \"\
        s/.*/built/\") >> $GITHUB_OUTPUT\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: ceres'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "ceres"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq-ext-lib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq-ext-lib"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "parsec"
  reglang:
    needs:
    - coq
    - mathcomp-ssreflect
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha\
        \ }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  mergeable=$(git merge --no-commit --no-ff ${{ github.event.pull_request.base.sha\
        \ }} > /dev/null 2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n\
        \  if [ -z \"$merge_commit\" -o \"x$mergeable\" != \"x0\" ]; then\n    echo\
        \ \"tested_commit=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\
        \  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target reglang
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"8.20\" --argstr job \"reglang\" \\\n   --dry-run 2>&1 > /dev/null)\n\
        echo $nb_dry_run\necho status=$(echo $nb_dry_run | grep \"built:\" | sed \"\
        s/.*/built/\") >> $GITHUB_OUTPUT\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: mathcomp-ssreflect'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "mathcomp-ssreflect"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "reglang"
  stalmarck:
    needs:
    - coq
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha\
        \ }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  mergeable=$(git merge --no-commit --no-ff ${{ github.event.pull_request.base.sha\
        \ }} > /dev/null 2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n\
        \  if [ -z \"$merge_commit\" -o \"x$mergeable\" != \"x0\" ]; then\n    echo\
        \ \"tested_commit=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\
        \  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target stalmarck
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"8.20\" --argstr job \"stalmarck\" \\\n   --dry-run 2>&1 > /dev/null)\n\
        echo $nb_dry_run\necho status=$(echo $nb_dry_run | grep \"built:\" | sed \"\
        s/.*/built/\") >> $GITHUB_OUTPUT\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "stalmarck"
  stalmarck-tactic:
    needs:
    - coq
    - stalmarck
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha\
        \ }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  mergeable=$(git merge --no-commit --no-ff ${{ github.event.pull_request.base.sha\
        \ }} > /dev/null 2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n\
        \  if [ -z \"$merge_commit\" -o \"x$mergeable\" != \"x0\" ]; then\n    echo\
        \ \"tested_commit=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\
        \  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target stalmarck-tactic
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"8.20\" --argstr job \"stalmarck-tactic\" \\\n   --dry-run 2>&1\
        \ > /dev/null)\necho $nb_dry_run\necho status=$(echo $nb_dry_run | grep \"\
        built:\" | sed \"s/.*/built/\") >> $GITHUB_OUTPUT\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: stalmarck'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "stalmarck"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "stalmarck-tactic"
  vscoq-language-server:
    needs:
    - coq
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha\
        \ }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  mergeable=$(git merge --no-commit --no-ff ${{ github.event.pull_request.base.sha\
        \ }} > /dev/null 2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n\
        \  if [ -z \"$merge_commit\" -o \"x$mergeable\" != \"x0\" ]; then\n    echo\
        \ \"tested_commit=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\
        \  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target vscoq-language-server
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"8.20\" --argstr job \"vscoq-language-server\" \\\n   --dry-run\
        \ 2>&1 > /dev/null)\necho $nb_dry_run\necho status=$(echo $nb_dry_run | grep\
        \ \"built:\" | sed \"s/.*/built/\") >> $GITHUB_OUTPUT\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "vscoq-language-server"
  zorns-lemma:
    needs:
    - coq
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha\
        \ }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{\
        \ github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{\
        \ github.event.repository.html_url }} refs/pull/${{ github.event.number }}/merge\
        \ | cut -f1)\n  mergeable=$(git merge --no-commit --no-ff ${{ github.event.pull_request.base.sha\
        \ }} > /dev/null 2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n\
        \  if [ -z \"$merge_commit\" -o \"x$mergeable\" != \"x0\" ]; then\n    echo\
        \ \"tested_commit=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\
        \  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq-community
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, math-comp
        name: coq-community
    - id: stepCheck
      name: Checking presence of CI target zorns-lemma
      run: "nb_dry_run=$(NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr\
        \ bundle \"8.20\" --argstr job \"zorns-lemma\" \\\n   --dry-run 2>&1 > /dev/null)\n\
        echo $nb_dry_run\necho status=$(echo $nb_dry_run | grep \"built:\" | sed \"\
        s/.*/built/\") >> $GITHUB_OUTPUT\n"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "8.20" --argstr
        job "zorns-lemma"
name: Nix CI for bundle 8.20
'on':
  pull_request:
    paths:
    - .github/workflows/nix-action-8.20.yml
  pull_request_target:
    paths-ignore:
    - .github/workflows/nix-action-8.20.yml
    types:
    - opened
    - synchronize
    - reopened
  push:
    branches:
    - master
